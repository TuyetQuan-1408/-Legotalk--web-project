const fs = require('fs');
const path = require('path');
const { MongoClient } = require('mongodb');

const mongoURI = "mongodb://localhost:27017";
const dbName = "legoTalk";
const collectionName = "Images";

async function uploadImages() {
    const client = new MongoClient(mongoURI);
    await client.connect();
    const db = client.db(dbName);
    const collection = db.collection(collectionName);

    const baseDir = "D://VSCode//legoTalk//Post//Posts//Post";  // ƒê∆∞·ªùng d·∫´n ƒë·∫øn th∆∞ m·ª•c ch·ª©a ·∫£nh

    // L·∫•y danh s√°ch th∆∞ m·ª•c (Tag)
    const tagFolders = fs.readdirSync(baseDir).filter(f => fs.lstatSync(path.join(baseDir, f)).isDirectory());

    for (const tag of tagFolders) {
        const tagPath = path.join(baseDir, tag);

        // L·∫•y danh s√°ch th∆∞ m·ª•c con b·∫≠c 2 (Product_ID)
        const productFolders = fs.readdirSync(tagPath).filter(f => fs.lstatSync(path.join(tagPath, f)).isDirectory());

        for (const productID of productFolders) {
            const productPath = path.join(tagPath, productID);

            // L·∫•y danh s√°ch ·∫£nh trong th∆∞ m·ª•c con b·∫≠c 2
            const images = fs.readdirSync(productPath).filter(f => ['.jpg', '.jpeg', '.png', '.gif', '.bmp', '.tiff', '.webp'].includes(path.extname(f).toLowerCase()));

            for (const imageName of images) {
                const imagePath = path.join(productPath, imageName);
                const imageBuffer = fs.readFileSync(imagePath);  // ƒê·ªçc ·∫£nh d∆∞·ªõi d·∫°ng Buffer

                // Chuy·ªÉn ƒë·ªïi Buffer th√†nh chu·ªói base64
                const base64Image = imageBuffer.toString('base64');

                // ƒê·∫∑t MIMEType
                const originalMimeType = path.extname(imageName).substring(1);  // L·∫•y ph·∫ßn m·ªü r·ªông c·ªßa ·∫£nh
                const mimeType = `image/${originalMimeType}`;  // ƒê·ªãnh d·∫°ng MIMEType

                // ƒê·∫∑t Order l√† t√™n ·∫£nh (trong tr∆∞·ªùng h·ª£p n√†y Order c√≥ th·ªÉ l√† t√™n ·∫£nh)
                const order = path.basename(imageName, path.extname(imageName));  // L·∫•y ph·∫ßn t√™n ·∫£nh m√† kh√¥ng c√≥ ph·∫ßn m·ªü r·ªông

                // L∆∞u v√†o MongoDB v·ªõi c·∫•u tr√∫c y√™u c·∫ßu
                await collection.insertOne({
                    Tag: tag,            // L∆∞u Tag (th∆∞ m·ª•c con b·∫≠c 1)
                    ID: productID,       // L∆∞u Product_ID (th∆∞ m·ª•c con b·∫≠c 2)
                    Order: order,        // L∆∞u Order (t√™n ·∫£nh)
                    ImageData: `data:${mimeType};base64,${base64Image}`,  // L∆∞u ·∫£nh d∆∞·ªõi d·∫°ng chu·ªói base64
                    MIMEType: mimeType,   // L∆∞u MIMEType c·ªßa ·∫£nh (image/jpg, image/png, ...)
                });

                console.log(`‚úÖ ƒê√£ l∆∞u ·∫£nh ${imageName} c·ªßa s·∫£n ph·∫©m ${productID} thu·ªôc Tag ${tag}`);
            }
        }
    }

    console.log("üéâ Ho√†n t·∫•t nh·∫≠p ·∫£nh v√†o MongoDB!");
    client.close();
}

uploadImages();
